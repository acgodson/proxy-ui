/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Controller, ControllerInterface } from "../Controller";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_wormholeRelayer",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "authorizedRouters",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "cleanUpExpiredKeys",
    inputs: [
      {
        name: "keys",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "expirationPeriod",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getIdempotencyData",
    inputs: [
      {
        name: "key",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "proxy",
        type: "address",
        internalType: "address",
      },
      {
        name: "predictedTokenUsage",
        type: "uint8",
        internalType: "enum Controller.OperationType",
      },
      {
        name: "processed",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "expirationTime",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "idempotencyKeys",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "proxy",
        type: "address",
        internalType: "address",
      },
      {
        name: "predictedTokenUsage",
        type: "uint8",
        internalType: "enum Controller.OperationType",
      },
      {
        name: "processed",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "expirationTime",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "receiveWormholeMessages",
    inputs: [
      {
        name: "payload",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]",
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "sourceChain",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "sourceAddress",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "registerRouter",
    inputs: [
      {
        name: "router",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "requestHashToKey",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setVault",
    inputs: [
      {
        name: "_vault",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "submitReceipt",
    inputs: [
      {
        name: "idempotencyKey",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "usedTokens",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "vault",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ControllerVault",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "wormholeRelayer",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IWormholeRelayer",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "KeyGenerated",
    inputs: [
      {
        name: "idempotencyKey",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "proxy",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "sourceChain",
        type: "uint16",
        indexed: false,
        internalType: "uint16",
      },
      {
        name: "sourceAddress",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ReceiptSubmitted",
    inputs: [
      {
        name: "idempotencyKey",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "token",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "usedTokens",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60a034606f57601f610a1a38819003918201601f19168301916001600160401b03831184841017607457808492602094604052833981010312606f57516001600160a01b03811690819003606f576201518060005560805260405161098f908161008b8239608051816101120152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c90816322b19af7146107de578163399bd823146101e6578163529dca321461043157816352edc576146103145781636817031b146102915781638897cad3146102745781639e6f1f6614610236578163a83cf62d146101e6578163ceb1a55b14610141578163da25b725146100fd578163dbd7761e146100d2575063fbfa77cf146100a757600080fd5b346100ce57816003193601126100ce5760015490516001600160a01b039091168152602090f35b5080fd5b9050346100f95760203660031901126100f957602092818392358252845220549051908152f35b8280fd5b5050346100ce57816003193601126100ce57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919050346100f9576020806003193601126101e257823567ffffffffffffffff938482116101de57366023830112156101de578101359384116101da5760249060053660248760051b840101116101d657865b86811061019f578780f35b8084600192841b850101358952600386528887812083810190428254106101ca575b50505001610194565b829055558838806101c1565b8680fd5b8480fd5b8580fd5b8380fd5b9050346100f95760203660031901126100f957918192358152600360205220610232600182549201549251928260ff859460a81c169060ff8160a01c169060018060a01b031685610834565b0390f35b5050346100ce5760203660031901126100ce5760209160ff9082906001600160a01b03610261610819565b1681526002855220541690519015158152f35b5050346100ce57816003193601126100ce57602091549051908152f35b919050346100f95760203660031901126100f9576102ad610819565b600154926001600160a01b03928385166102dd57505016906bffffffffffffffffffffffff60a01b161760015580f35b906020606492519162461bcd60e51b8352820152601160248201527015985d5b1d08185b1c9958591e481cd95d607a1b6044820152fd5b8383346100ce5760603660031901126100ce578235906024356001600160a01b03818116918290036101da576001541633036103ee57828452600360205281842080549561036860ff8860a81c1615610915565b600182015442116103bd575060ff60a81b19909516600160a81b1790945580519384526044356020850152919290917fe86805a29ea436a5ac04036d59a19f9fcd11f5c24fb23ae6943ac7e4a4d760d091a280f35b606490602085519162461bcd60e51b8352820152600b60248201526a12d95e48195e1c1a5c995960aa1b6044820152fd5b815162461bcd60e51b8152602081870152601d60248201527f4f6e6c79207661756c742063616e207375626d697420726563656970740000006044820152606490fd5b838360a03660031901126100ce5767ffffffffffffffff9083358281116101e25761045f90369086016108ce565b916024948535908282116101de57366023830112156101de5781810135918383116107cc578260051b886020809588519061049c8386018361087a565b815201918301019136831161075957898101915b8383106107a257505050506064359261ffff84168094036101d6573387526002835260ff858820541615610761578551860195858185890198031261075d5783810151906002821015610759578681015190838211610706570187603f82011215610759578481015190610523826108b2565b9861053089519a8b61087a565b828a528883830101116107065789918691835b8281106107425750508901015261070a576080868051810103126101d657858301516001600160a01b038082169791929188840361070657878101519360608201519160038310156107025760800151895190888201926bffffffffffffffffffffffff199060601b16835286603483015260548201526054815260808101818110868211176106f0578a8d9e936105f19360ff9383525190209d8e815260038b52205460a81c1615610915565b8b544201928342116106de5789519460808601908111868210176106cc578a528a8552878501928352848a018d8152606086019485528c8e526003808a528b8f2096518754955194931692908410156106bb57505160a09290921b60ff60a01b166001600160b01b0319909316179190911790151560a81b60ff60a81b161782555160019190910155875281528286208590558251938452830152608435908201527e6e64a2b941efe78d8b2b4b2b665167ca71edf066ebc16a49d9d00e062c75ad90606090a280f35b634e487b7160e01b8f52602189528efd5b634e487b7160e01b8e5260418852828efd5b50634e487b7160e01b8c52601186528bfd5b634e487b7160e01b8d52604188528d8dfd5b8b80fd5b8980fd5b5060148760649386519362461bcd60e51b8552840152820152732ab739bab83837b93a32b210333ab731ba34b7b760611b6044820152fd5b8181018b01518c82018501528c9450889301610543565b8880fd5b8780fd5b5060188760649386519362461bcd60e51b85528401528201527f4e6f7420616e20617574686f72697a656420726f7574657200000000000000006044820152fd5b82358781116107c85786916107bd83928e36918701016108ce565b8152019201916104b0565b8a80fd5b634e487b7160e01b8752604182528787fd5b5050346100ce5760203660031901126100ce576001600160a01b03610801610819565b16825260026020528120805460ff1916600117905580f35b600435906001600160a01b038216820361082f57565b600080fd5b6001600160a01b039091168152608081019493926003831015610864576060926020830152151560408201520152565b634e487b7160e01b600052602160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761089c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161089c57601f01601f191660200190565b81601f8201121561082f578035906108e5826108b2565b926108f3604051948561087a565b8284526020838301011161082f57816000926020809301838601378301015290565b1561091c57565b60405162461bcd60e51b815260206004820152601560248201527412d95e48185b1c9958591e481c1c9bd8d95cdcd959605a1b6044820152606490fdfea26469706673582212207e2214835e97d371f1327f0e6539c0a974b58234a21c216802fcb18206d9a02464736f6c63430008190033";

type ControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Controller__factory extends ContractFactory {
  constructor(...args: ControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormholeRelayer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<Controller> {
    return super.deploy(
      _wormholeRelayer,
      overrides || {}
    ) as Promise<Controller>;
  }
  override getDeployTransaction(
    _wormholeRelayer: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_wormholeRelayer, overrides || {});
  }
  override attach(address: string): Controller {
    return super.attach(address) as Controller;
  }
  override connect(signer: Signer): Controller__factory {
    return super.connect(signer) as Controller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControllerInterface {
    return new utils.Interface(_abi) as ControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Controller {
    return new Contract(address, _abi, signerOrProvider) as Controller;
  }
}
